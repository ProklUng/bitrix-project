###########
# Роутинг
###########

services:
  # конфигурация по умолчанию в *этом* файле
  _defaults:
    autowire: true
    autoconfigure: true
    public: true

  Local\Services\AppRequest: '@request'

  # Запрос.
  request:
    class: Local\Services\AppRequest
    tags: ['service.bootstrap']

  # Request приложения.
  global.request:
    class: Symfony\Component\HttpFoundation\Request
    factory: ['@request', 'getRequest']

  Symfony\Component\Routing\RequestContext: ~

  request.context:
    class: Symfony\Component\Routing\RequestContext
    factory: ['@Symfony\Component\Routing\RequestContext', 'fromRequest']
    arguments: ['@global.request']

  file_locator:
    class: Symfony\Component\Config\FileLocator

    routing.resolver:
      class: Symfony\Component\Config\Loader\LoaderResolver

    routing.loader.yml:
      class: Symfony\Component\Routing\Loader\YamlFileLoader
      arguments: ['@file_locator']
      tags:
        - { name: routing.loader }

    routing.loader.php:
      class: Symfony\Component\Routing\Loader\PhpFileLoader
      arguments: ['@file_locator']
      tags:
        - { name: routing.loader }

    routing.loader.xml:
      class: Symfony\Component\Routing\Loader\XmlFileLoader
      arguments: ['@file_locator']
      tags:
        - { name: routing.loader }

    routing.loader.glob:
      class: Symfony\Component\Routing\Loader\GlobFileLoader
      arguments: ['@file_locator']
      tags:
        - { name: routing.loader }

    routing.loader.directory:
      class: Symfony\Component\Routing\Loader\DirectoryLoader
      arguments: ['@file_locator']
      tags:
        - { name: routing.loader }

    routing.loader:
      class: Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader
      arguments:
        - '@routing.resolver'
        - []
        - []

    router:
      class: Symfony\Component\Routing\Router
      arguments:
        - '@@routing.resolver'
        - '%kernel.project_dir%/local/configs/routes.yaml'
        - []
        - '@request.context'

    Symfony\Component\Routing\RouterInterface: '@router'

  #####################
  # Роутер.
  #####################

  Symfony\Component\HttpKernel\Controller\ControllerResolver:
    class: Symfony\Component\HttpKernel\Controller\ControllerResolver

  # Загрузчик роутов из Yaml конфига.
  routes.config:
    class: Local\SymfonyTools\Router\RouterConfig
    arguments: ['%kernel.project_dir%', '/local/configs/routes.yaml', '@load.annotated.routes']

  # Коллекция загруженных роутов.
  routes.collection:
    class: Symfony\Component\Routing\RouteCollection
    factory: ['@router', 'getRouteCollection']

  router.default: '@routes.collection'

  Local\SymfonyTools\Router\RouterConfig: '@routes.config'

  # Symfony загрузчик аннотированных роутов.
  symfony.loader.annotated.routes:
    class: Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader
    arguments: ['@Local\SymfonyTools\Router\Annotations\ForkAnnotationReader']

  # Конечный сервис чтения и загрузки анотированных роутов.
  load.annotated.routes:
    class: Local\SymfonyTools\Router\Annotations\LoadAnnotatedRoutes
    arguments: ['@class.collector', '@symfony.loader.annotated.routes']

  # Стандартный контроллер ошибок.
  standart.error.controller:
    class: Local\SymfonyTools\Framework\Controllers\ErrorController
    arguments: ['@serialize']

  # Json контроллер ошибок.
  json.error.controller:
    class: Local\SymfonyTools\Framework\Controllers\ErrorJsonController
    arguments: ['@serialize']

  Local\SymfonyTools\Framework\Controllers\ErrorJsonController: '@json.error.controller'

  # Диспетчер запуска контроллеров.

  # Инициализатор роутов.
  init.router:
    class: Local\SymfonyTools\Router\InitRouter
    arguments:
      - '@routes.collection'
      - '@json.error.controller'
      - '@event_dispatcher'
      - '@controller_resolver'
      - '@argument_resolver'
      - '@request_stack'
    # Подвязка на битриксовое событие.
    tags:
      - { name: bitrix.events.init, module: main, event: OnProlog, method: handle, sort: 1 }

  # Проверка роутов.
  route.checker:
    class: Local\ServiceProvider\Utils\RouteChecker
    arguments: ['@routes.collection']


  # Диспетчер запуска контроллеров.
  dispatcher.controller:
    class: Local\SymfonyTools\Framework\DispatchController
    arguments:
      - '@event_dispatcher'
      - '@controller_resolver'
      - '@argument_resolver'
      - '@json.error.controller'

  Local\SymfonyTools\Framework\DispatchController: '@dispatcher.controller'

  # Диспетчер запуска роутов.
  dispatcher.route:
    class: Local\SymfonyTools\Framework\Utils\DispatchRoute
    arguments:
      - '@event_dispatcher'
      - '@json.error.controller'
      - '@Symfony\Component\HttpKernel\Controller\ControllerResolver'
      - '@argument_resolver'
      - '@serializer'

  Local\SymfonyTools\Framework\Utils\DispatchRoute: '@dispatcher.route'

  Local\SymfonyTools\Framework\Utils\ControllerProcessor:
    class: Local\SymfonyTools\Framework\Utils\ControllerProcessor
    arguments:
      - '@service_container'
      - '@Local\SymfonyTools\Framework\Utils\ResolverDependency\ResolveDependencyMakerContainerAware'
      - '@Local\SymfonyTools\ArgumentsResolvers\Supply\ResolveParamsFromContainer'
      - '@Local\ServiceProvider\Utils\IgnoredAutowiringControllerParamsBag'

  # Игнорируемые при автовайринге классы (учитывя наследование).
  ignored.autowiring.controller.arguments:
    class: Local\ServiceProvider\Utils\IgnoredAutowiringControllerParamsBag
    calls:
      - add: [['Local\Bundles\ApiDtoConvertorBundle\DependencyInjection\BaseDTOInterface']]

  Local\ServiceProvider\Utils\IgnoredAutowiringControllerParamsBag: '@ignored.autowiring.controller.arguments'
